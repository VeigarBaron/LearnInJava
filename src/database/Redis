redis 被⼴泛应⽤于缓存⽅向、分布式锁。
redis ⽀持事务、持久化、LUA脚本、LRU驱动事件、多种集群⽅案。

String
    常⽤命令: set,get,decr,incr,mget 等。
    ·String数据结构是简单的key-value类型，value其实不仅可以是String，也可以是数字。 常规key-value缓存应⽤；
    常规计数：微博数，粉丝数等。
Hash
    hash 是⼀个 string 类型的 field 和 value 的映射表，hash 特别适合⽤于存储对象，后续操作的时候，
    ·你可以直接仅仅修改这个对象中的某个字段的值。 ⽐如我们可以 hash 数据结构来存储⽤户信息，商品信息等等。

List
    常⽤命令: lpush,rpush,lpop,rpop,lrange等
    ·list 就是链表，Redis list 的应⽤场景⾮常多，也是Redis最重要的数据结构之⼀，⽐如微博的关注列表，
    粉丝列表，消息列表等功能都可以⽤Redis的 list 结构来实现。
    ·Redis list 的实现为⼀个双向链表，即可以⽀持反向查找和遍历，更⽅便操作，不过带来了部分额外的内存开销。
    ·另外可以通过 lrange 命令，就是从某个元素开始读取多少个元素，可以基于 list 实现分⻚查询，这个很棒的⼀个功能，
    基于 redis 实现简单的⾼性能分⻚，可以做类似微博那种下拉不断分⻚的东⻄（⼀⻚⼀⻚的往下⾛），性能⾼。

Set
    常⽤命令： sadd,spop,smembers,sunion 等
    ·set 对外提供的功能与list类似是⼀个列表的功能，特殊之处在于 set 是可以⾃动排重的。
    当你需要存储⼀个列表数据，⼜不希望出现重复数据时，set是⼀个很好的选择，并且set提供了判断某个成员是否在⼀个set集合内的重要接⼝，
    这个也是list所不能提供的。可以基于 set 轻易实现交集、并集、差集的操作。

Sorted Set
    常⽤命令： zadd,zrange,zrem,zcard等
    ·和set相⽐，sorted set增加了⼀个权重参数score，使得集合中的元素能够按score进⾏有序排列。
    举例： 在直播系统中，实时排⾏信息包含直播间在线⽤户列表，各种礼物排⾏榜，弹幕消息（可以理解为按消息维度的消息排⾏榜）等信息，
    适合使⽤ Redis 中的 Sorted Set 结构进⾏存储。

redis 设置过期时间？ 定期删除+惰性删除。 如果还是清不掉，则redis内存淘汰机制：
    redis 提供 6种数据淘汰策略：
    1. volatile-lru：从已设置过期时间的数据集（server.db[i].expires）中挑选最近最少使⽤的数据淘汰
    2. volatile-ttl：从已设置过期时间的数据集（server.db[i].expires）中挑选将要过期的数据淘汰
    3. volatile-random：从已设置过期时间的数据集（server.db[i].expires）中任意选择数据淘汰
    4. allkeys-lru：当内存不⾜以容纳新写⼊数据时，在键空间中，移除最近最少使⽤的key（这个是最常⽤的）
    5. allkeys-random：从数据集（server.db[i].dict）中任意选择数据淘汰
    6. no-eviction：禁⽌驱逐数据，也就是说当内存不⾜以容纳新写⼊数据时，新写⼊操作会报错。这个应该没⼈使⽤吧！
    === 4.0版本后增加以下两种 ===：
    7. volatile-lfu：从已设置过期时间的数据集(server.db[i].expires)中挑选最不经常使⽤的数据淘汰
    8. allkeys-lfu：当内存不⾜以容纳新写⼊数据时，在键空间中，移除最不经常使⽤的key

redis 持久化机制(怎么保证 redis 挂掉之后再重启数据可以进⾏恢复)
    Redis的⼀种持久化⽅式叫快照(snapshotting，RDB)，另⼀种⽅式是只追加⽂件(append-onlyfile,AOF)

·快照（snapshotting）持久化（RDB）
    Redis可以通过创建快照来获得存储在内存⾥⾯的数据在某个时间点上的副本。Redis创建快照之后，可以对快照进⾏备份，
    可以将快照复制到其他服务器从⽽创建具有相同数据的服务器副本（Redis主从结构，主要⽤来提⾼Redis性能），
    还可以将快照留在原地以便重启服务器的时候使⽤。
·AOF（append-only file）持久化
    开启AOF持久化后每执⾏⼀条会更改Redis中的数据的命令，Redis就会将该命令写⼊硬盘中的AOF⽂件。
    AOF⽂件的保存位置和RDB⽂件的位置相同,在Redis的配置⽂件中存在三种不同的 AOF 持久化⽅式，它们分别是：
        1: appendfsync always #每次有数据修改发⽣时都会写⼊AOF⽂件,这样会严重降低Redis的速度
        2: appendfsync everysec #每秒钟同步⼀次，显示地将多个写命令同步到硬盘
        3: appendfsync no #让操作系统决定何时进⾏同步
·Redis 4.0 对于持久化机制的优化
    Redis 4.0 开始⽀持 RDB 和 AOF 的混合持久化（默认关闭，可以通过配置项 aof-use-rdbpreamble 开启）。
·AOF 重写
    AOF重写可以产⽣⼀个新的AOF⽂件，这个新的AOF⽂件和原有的AOF⽂件所保存的数据库状态⼀样，但体积更⼩。
布隆过滤器
    https://github.com/Snailclimb/JavaGuide/blob/master/docs/dataStructures-algorithms/data-structure/bloom-filter.md

 如何保证缓存与数据库双写时的数据⼀致性?