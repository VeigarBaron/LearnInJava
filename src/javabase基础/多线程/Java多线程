进程-是资源分配的基本单位。
    进程控制块 (Process Control Block, PCB) 描述进程的基本信息和运行状态，所谓的创建进程和撤销进程，都是指对 PCB 的操作。

线程-是独立调度的基本单位。
    一个进程中可以有多个线程，它们共享进程资源。

区别：
Ⅰ 拥有资源
    进程是资源分配的基本单位，但是线程不拥有资源，线程可以访问隶属进程的资源。
Ⅱ 调度
    线程是独立调度的基本单位，在同一进程中，线程的切换不会引起进程切换，从一个进程中的线程切换到另一个进程中的线程时，会引起进程切换。
Ⅲ 系统开销
    由于创建或撤销进程时，系统都要为之分配或回收资源，如内存空间、I/O 设备等，所付出的开销远大于创建或撤销线程时的开销。
    类似地，在进行进程切换时，涉及当前执行进程 CPU 环境的保存及新调度进程 CPU 环境的设置，而线程切换时只需保存和设置少量寄存器内容，开销很小。
Ⅳ 通信方面
    线程间可以通过直接读写同一进程中的数据进行通信，但是进程通信需要借助 IPC。

线程的⽣命周期和状态?
初始状态(new):      线程被构建，但是没有start()
运行状态(runnable): 包括就绪就绪状态(ready)和运行两种状态
阻塞状态(blocked):  表示线程阻塞于锁🔒
等待状态(waiting):  等待资源，该状态下，表示当前线程需要等待其他线程做出一些特定动作(通知或中断)
超时等待状态(time_waiting):  不同于waiting，可以在指定的时间自行返回
终止状态(ready):    表示线程已经执行完毕

产⽣死锁必须具备以下四个条件：
    1. 互斥条件：该资源任意⼀个时刻只由⼀个线程占⽤。
    2. 请求与保持条件：⼀个进程因请求资源⽽阻塞时，对已获得的资源保持不放。
    3. 不剥夺条件:线程已获得的资源在末使⽤完之前不能被其他线程强⾏剥夺，只有⾃⼰使⽤完毕后才释放资源。
    4. 循环等待条件:若⼲进程之间形成⼀种头尾相接的循环等待资源关系。

只有就绪态和运行态可以相互转换，其它的都是单向转换。
就绪状态的进程通过调度算法从而获得 CPU 时间，转为运行状态；而运行状态的进程，在分配给它的 CPU 时间片用完之后就会转为就绪状态，等待下一次调度。
阻塞状态是缺少需要的资源从而由运行状态转换而来，但是该资源不包括 CPU 时间，缺少 CPU 时间会从运行态转换为就绪态。

避免死锁的几个常见方法。
·避免一个线程同时获取多个锁。
·避免一个线程在锁内同时占用多个资源，尽量保证每个锁只占用一个资源。
·尝试使用定时锁，使用lock.tryLock（timeout）来替代使用内部锁机制。
·对于数据库锁，加锁和解锁必须在一个数据库连接里，否则会出现解锁失败的情况。

